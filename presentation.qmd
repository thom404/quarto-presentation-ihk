# Projekteinführung
:::{.center}
![](./images/title-svgs/einfuehrung.svg)
:::

##
:::{.subheader}
Ausbildungsbetrieb
:::

:::: {.columns}
:::{.column width="40%"}
- holistic-net GmbH
- Standort Hannover
- Gründung 2002
- 14 Mitarbeitende
- Kerngeschäft
  - Migrationen
  - Individual-Software
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/meetTheTeam.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Projekteinführung
:::

##
:::{.subheader}
Projektziel
:::

:::: {.columns}
:::{.column width="50%"}
- Backend-Erweiterung von HPT
  - Verwaltung interner Ankündigungen
  - autorisierte Nutzer: Ankündigungen erstellen/ändern
- Verbesserung interner Kommunikation & Informationsverteilung
:::

:::{.column .r-stretch .center .secure-layout}
![](./images/title-svgs/ziel.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Projekteinführung
:::

## {auto-animate=true}
:::{.subheader}
Ausgangssituation
:::

:::: {.columns}
:::{.column width="50%"}
- keine zentrale Plattform für Ankündigungen
- Wunsch: 
  - Zentrale, nachvollziehbare Informationsplattform
- HPT bereits im Einsatz: Ressourcen- & Projektverwaltung
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/ausgangssituation.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Projekteinführung
:::

## {auto-animate=true}
:::{.subheader}
Einführung HPT
:::

:::: {.columns}
:::{.column width="40%"}
- Holistic Project Tracking
- Intern genutzt
- Webanwendung
- Projektmanagement
- Kundenakquise
:::

:::{.column .r-stretch .center}
![](./images/hpt-fe/HPT_Main.png)
:::
::::

:::{.footer}
© {{<meta name>}} | Projekteinführung
:::

## {.center auto-animate=true}
![](./images/hpt-fe/HPT_Main.png)

## {auto-animate=true}
:::{.subheader}
HPT: Funktionen
:::

:::: {.columns}
:::{.column width="40%"}
- Projekte
- Akquise
- Präsentationsmodus
:::

:::{.column .r-stretch .center}
![](./images/hpt-fe/HPT_Main.png)
:::
::::

:::{.footer}
© {{<meta name>}} | Projekteinführung
:::

# Projektplanung {.center}
:::{.center}
![](./images/title-svgs/undraw_scrum-board_uqku.svg)
:::

## {auto-animate=true}
:::{.subheader}
Projektphasen
:::

:::: {.columns}
:::{.column width="50%"}
| Phase            | Zeit (80h) |
|------------------|------|
| Analyse          | 5 h  |
| Entwurf          | 8 h  |
| Implementierung  | 39 h |
| Abnahme          | 5 h  |
| Dokumentation    | 23 h |
:::

:::{.column .r-stretch .center}
![](./images/diagramme/gantt_to_pdf-1.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Projektplanung
:::

## {.center auto-animate=true}
![](./images/diagramme/gantt_to_pdf-1.svg)


##
:::{.subheader}
Vorgehensmodell
:::

![](./images/diagramme/erw_Wasserfalldiagramm.drawio.svg)


:::{.notes}
**Wasserfallmodell mit Rückkopplung**
- sequenzielle Abarbeitung der Projektphasen
- Möglichkeit, bei Bedarf zu vorherigen Phasen zurückzukehren
:::

:::{.footer}
© {{<meta name>}} | Projektplanung
:::

# Analysephase {.center}
:::{.center}
![](./images/title-svgs/analyse.svg)
:::

## {auto-animate=true}
:::{.subheader}
IST-Analyse
:::

:::: {.columns}
:::{.column width="50%"}
- Plattformen: 
  - E-Mail 
  - MS Teams
  - mündlich
- unübersichtlich & flüchtig
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/analyse.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Analysephase
:::

##
:::{.subheader}
Technischer Überblick HPT
:::

:::: {.columns}
:::{.column width="50%"}
- **Backend**: .NET 8, ASP.NET Core, C#, EFCore
- **Frontend**: Angular (nicht Teil des Projekts)
- **DB**: MSSQL 2022, Code-First
- **Authentifizierung**: Microsoft Entra ID
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/analyse.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Analysephase
:::

## {auto-animate=true}
:::{.subheader}
Wirtschaftlichkeitsanalyse
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/finance.svg)
:::

:::{.footer}
© {{<meta name>}} | Analysephase
:::

## {auto-animate=true}
:::{.subheader}
Make-or-Buy-Entscheidung
:::

:::: {.columns}
:::{.column width="40%"}
- **Kontrolle** über die Software
- **Integration** in bestehende Software
- Kosten **extern > intern**
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/finance.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Analysephase
:::

##
:::{.subheader}
Kostenberechnung
:::

:::: {.columns}
:::{.column width="45%"}
- Azubi: 80h × 42 € = 3.360 €
- Berater: 5h × 90 € = 450 €

:::{.center}
&rarr; **Gesamt: 3.810 €**
:::
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/undraw_calculator_21hp.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Analysephase
:::

## {auto-animate=true}
:::{.subheader}
Anforderungsanalyse
:::

:::: {.columns}
:::{.column width="45%"}
- **CRUD-Funktionen**
  - Ankündigung erstellen / bearbeiten / löschen (berechtigte Nutzer)
  - Ankündigungen anzeigen (alle Nutzer)
- Optional: Titelbild & Status(z. B. „draft, published“)

:::

:::{.column .r-stretch .center}
![](./images/diagramme/usecase_puml.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Analysephase
:::

## {auto-animate=true .center}

:::{.r-stretch}
![](./images/diagramme/usecase_puml.svg)
:::

:::{.footer}
© {{<meta name>}} | Analysephase
:::

# Entwurfsphase {.center}
:::{.center .secure-layout}
![](./images/title-svgs/prototype.svg)
:::

## {auto-animate=true}
:::{.subheader}
Ziel-Plattform
:::

:::: {.columns}
:::{.column width="50%"}
- C#
- ASP.NET Core
- EF Core
- xUnit & FluentAssertions
- OpenAPI
- MSSQL
:::

:::{.column .r-stretch .center}
![](./images/title-svgs/undraw_server_9eix.svg)
:::
::::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
:::{.subheader}
Architekturdesign
:::

:::: {.columns}
:::{.column width="50%"}
- Client-Server-Prinzip
  - **Backend**: ASP.NET Core Web API + EF Core
  - **Datenbank**: MSSQL
  - **Frontend**: Angular
:::

:::{.column .r-stretch .center}
<!-- ![](./images/title-svgs/undraw_building_burz.svg) -->
```{mermaid}
architecture-beta
    group hpt(internet)[HPT Schichten]

    service presentation(server)[Angular as Presentation Layer] in hpt
    service business(server)[NET as Business Layer] in hpt
    service persitence(server)[NET with EFC as Persistence Layer] in hpt
    service db(database)[MSSQL as Data Layer] in hpt

    presentation:R <--> L :business
    business:B <--> T:persitence
    persitence:L <--> R:db
```
:::
::::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

::: {.notes}
**Client-Server-Prinzip**
- Trennung von Frontend und Backend
- strukturierte Aufgabenverteilung 
- wartungsfreundliche Architektur

**Backend**
- RESTful API für CRUD-Operationen
- Authentifizierung via Microsoft Entra ID

**Frontend**
- Interaktion mit Backend über HTTP-Requests

**Datenbank**
- Speicherung von Ankündigungen, Bild-URL und Status
:::

## {auto-animate=true .center}
:::{.r-stretch .zoom-in}
```{mermaid}
architecture-beta
    group hpt(internet)[HPT Schichten]

    service presentation(server)[Angular as presentation layer] in hpt
    service business(server)[NET as business layer] in hpt
    service persitence(server)[NET with EF Core as persistence layer] in hpt
    service db(database)[MSSQL as data layer] in hpt

    presentation:R <--> L :business
    business:B <--> T:persitence
    persitence:L <--> R:db
```
:::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

##
:::{.subheader}
UI-Mockup
:::
:::::{.columns}
::::{.center}
:::{.column}
![](./images/hpt-fe/hpt-mockup/Mockup_ItemsView.png)
:::
:::{.column}
![](./images/hpt-fe/hpt-mockup/Mockup_EditView.png)
:::
::::
:::::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
:::{.subheader}
UI-Mockup
:::
:::::{.columns}
::::{.center}
:::{.column}
![](./images/hpt-fe/hpt-mockup/Mockup_ItemsView.png)
:::
:::{.column}
![](./images/hpt-fe/hpt-mockup/Mockup_EditView.png)
:::
::::
:::::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
![](./images/hpt-fe/hpt-mockup/Mockup_ItemsView.png)

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
:::{.subheader}
UI-Mockup
:::
:::::{.columns}
::::{.center}
:::{.column}
![](./images/hpt-fe/hpt-mockup/Mockup_ItemsView.png)
:::
:::{.column}
![](./images/hpt-fe/hpt-mockup/Mockup_EditView.png)
:::
::::
:::::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
![](./images/hpt-fe/hpt-mockup/Mockup_EditView.png)

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
:::{.subheader}
Datenmodell
:::

:::: {.columns}
:::{.column width="40%"}
**Neue Entitäten:**

:::::{data-id="entity-Announcement"}
`Announcement`
:::::
:::::{data-id="entity-AnnouncementImage"}
`AnnouncementImage`
:::::
:::::{data-id="entity-AnnouncementStatus"}
`AnnouncementStatus`
:::::
:::

:::{.column .r-stretch .center}
![](./images/diagramme/ERM.png)
:::
::::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true .center}

![](./images/diagramme/ERM.png)

## {auto-animate=true}
:::{.subheader}
Datenmodell
:::

:::: {.columns}
:::{.column width="40%"}
**Neue Entitäten:**

:::::{data-id="entity-Announcement"}
`Announcement`
:::::
:::::{data-id="entity-AnnouncementImage"}
`AnnouncementImage`
:::::
:::::{data-id="entity-AnnouncementStatus"}
`AnnouncementStatus`
:::::
:::

:::{.column .r-stretch .center}
![](./images/diagramme/ERM.png)
:::
::::

:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
:::{.subheader}
Geschäftslogik
:::
:::{.center"}
```{mermaid}
flowchart TD

    %% Komponenten
    Controller["AnnouncementController"]:::component
    UnitOfWork["UnitOfWork"]:::component
    ImageService["ImageService"]:::component
    Database["SQL SERVER"]:::db

    %% Interfaces
    UoWInterface["<<interface>> IUnitOfWork"]:::component
    MapperInterface["<<interface>> IMapper"]:::component
    ImageServiceInterface["<<interface>> ImageService"]:::component
    AnnouncementRepo["<<interface>> IAnnouncementRepository"]:::component
    ImageRepo["<<interface>> IAnnouncementImageRepository"]:::component

    %% Externe Abhängigkeiten
    Auth["Microsoft Identity (Scope Validation)"]:::ext
    FileSystem["File Storage"]:::ext

    %% Beziehungen
    Controller --> UoWInterface
    Controller --> MapperInterface
    Controller --> ImageServiceInterface
    Controller --> Auth

    UoWInterface --> UnitOfWork
    UnitOfWork --> AnnouncementRepo
    UnitOfWork --> ImageRepo

    AnnouncementRepo --> Database
    ImageRepo --> Database

    ImageServiceInterface --> ImageService
    ImageService --> FileSystem
```
:::
:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

## {auto-animate=true}
:::{.subheader}
Qualitätssicherung
:::
:::}
- Test-Driven-Development (TDD)
  - Unit-Tests mit xUnit & FluentAssertions
  - Implementierung von Tests vor der eigentlichen Logik
:::
:::{.footer}
© {{<meta name>}} | Entwurfsphase
:::

# Implementierungsphase {.center}
:::{.center .secure-layout}
![](./images/title-svgs/implement.svg)
:::

## {auto-animate=true}
:::{.subheader data-id="entity-Announcement"}
Datenstrukturen
:::
::::{.columns}
:::::{.column width="40%"}
::::::{data-id="entity-Announcement"}
`Announcement`
::::::
::::::{data-id="entity-AnnouncementImage"}
`AnnouncementImage`
::::::
::::::{data-id="entity-AnnouncementStatus"}
`AnnouncementStatus`
::::::
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_maintenance_rjtm.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-Announcement"}
`Announcement`
:::

```{.cs}
public class Announcement
{
    public int Id { get; set; } // Primary key
    public DateTime CreationDate { get; set; }
    public DateTime? PublishedDate { get; set; }
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;

    // Foreign key for Status ( Each Announcement has one Status )
    public int AnnouncementStatusId { get; set; }
    public AnnouncementStatus AnnouncementStatus { get; set; } = null!;

    // Foreign key for Image
    public int? AnnouncementImageId { get; set; }
    public AnnouncementImage? AnnouncementImage { get; set; }
}
```

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-Announcement"}
`Announcement`
:::

```{.cs code-line-numbers="3|4-7|10-11|14-15"}
public class Announcement
{
    public int Id { get; set; } // Primary key
    public DateTime CreationDate { get; set; }
    public DateTime? PublishedDate { get; set; }
    public string Title { get; set; } = string.Empty;
    public string Content { get; set; } = string.Empty;

    // Foreign key for Status ( Each Announcement has one Status )
    public int AnnouncementStatusId { get; set; }
    public AnnouncementStatus AnnouncementStatus { get; set; } = null!;

    // Foreign key for Image
    public int? AnnouncementImageId { get; set; }
    public AnnouncementImage? AnnouncementImage { get; set; }
}
```

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-Announcement"}
Datenstrukturen
:::
::::{.columns}
:::::{.column width="40%"}
::::::{data-id="entity-Announcement" .done}
`Announcement`
::::::
::::::{data-id="entity-AnnouncementImage"}
`AnnouncementImage`
::::::
::::::{data-id="entity-AnnouncementStatus"}
`AnnouncementStatus`
::::::
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_maintenance_rjtm.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-AnnouncementImage"}
`AnnouncementImage`
:::

```{.cs code-line-numbers="1-10|3|6-7|9-10"}
public class AnnouncementImage
{
    public int Id { get; set; }

    // Foreign Key of Announcement (Each Announcement can have one AnnouncementImage)
    public int AnnouncementId { get; set; }
    public Announcement Announcement { get; set; } = null!;

    public string Image { get; set; } = null;
    public string Thumbnail { get; set; } = null;
}


```
:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-Announcement"}
Datenstrukturen
:::
::::{.columns}
:::::{.column width="40%"}
::::::{data-id="entity-Announcement" .done}
`Announcement`
::::::
::::::{data-id="entity-AnnouncementImage" .done}
`AnnouncementImage`
::::::
::::::{data-id="entity-AnnouncementStatus"}
`AnnouncementStatus`
::::::
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_maintenance_rjtm.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-AnnouncementStatus"}
`AnnouncementStatus`
:::

```{.cs code-line-numbers="1-8|3|5|7"}
public class AnnouncementStatus
{
    public int Id { get; set; }
    // Navigation Property: One status can have multible Announcements
    public ICollection<Announcement> Announcements { get; set; } = [];

    public string Name { get; set; } = string.Empty;
}

```
:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-Announcement"}
Datenstrukturen
:::
::::{.columns}
:::::{.column width="40%"}
::::::{data-id="entity-Announcement" .done}
`Announcement`
::::::
::::::{data-id="entity-AnnouncementImage" .done}
`AnnouncementImage`
::::::
::::::{data-id="entity-AnnouncementStatus" .done}
`AnnouncementStatus`
::::::
::::::{data-id="entity-DataContext"}
`DataContext`
::::::
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_maintenance_rjtm.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="entity-DataContext"}
`DataContext`
:::

```{.cs code-line-numbers="1-24|4-6|8-24|12-16|18-22"}
public class DataContext(DbContextOptions<DataContext> options) : DbContext(options)
{
    ...
    public DbSet<Announcement> Announcement { get; set; }
    public DbSet<AnnouncementImage> AnnouncementImage { get; set; }
    public DbSet<AnnouncementStatus> AnnouncementStatus { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        ...
        //If status deleted, Announcement should keep the status
        modelBuilder.Entity<AnnouncementStatus>()
            .HasMany(aS => aS.Announcements)
            .WithOne(a => a.AnnouncementStatus)
            .HasForeignKey(a => a.AnnouncementStatusId)
            .OnDelete(DeleteBehavior.Restrict);
        //If Announcement is deleted, delete the image
        modelBuilder.Entity<AnnouncementImage>()
        .HasOne(aI => aI.Announcement)
        .WithOne(a => a.AnnouncementImage)
        .HasForeignKey<Announcement>(a => a.AnnouncementImageId)
        .OnDelete(DeleteBehavior.Cascade);
    }
}
```

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader}
Unit-Tests
:::

::::{.columns}
:::::{.column width="40%"}
:::{data-id="tests"}
`ImageServiceTests`
:::
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_fixing-bugs_13mt.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="tests"}
Unit-Tests
:::
::: {.r-stack}
```{.cs code-line-numbers="1|3-4|6-10|12-23|15-16|18-19|21-22"}
public class ImageServiceTests
{
    private readonly Mock<IFileService> _fileServiceMock;
    private readonly ImageService _imageService;

    public ImageServiceTests()
    {
        _fileServiceMock = new Mock<IFileService>();
        _imageService = new ImageService(_fileServiceMock.Object);
    }

    [Fact]
    public void DeleteAnnouncementImageFiles_ShouldNotCallDelete_WhenAnnouncementImageIsNull()
    {
        // Arrange
        var announcement = new Announcement { AnnouncementImage = null };

        // Act
        _imageService.DeleteAnnouncementImageFiles(announcement);

        // Assert
        _fileServiceMock.Verify(x => x.DeleteFile(It.IsAny<string>()), Times.Never);
    }
}
```
::::{.fragment}
![](./images/code_and_tests/unit-test-result.png){.fragment .grow}
::::
:::
:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader}
Geschäftslogik
:::

::::{.columns}
:::::{.column width="50%"}
:::{data-id="dto" .orange}
DTOs
:::
:::{data-id="services" .orange}
Services
:::
:::{data-id="auth" .orange}
Autorisierung
:::
:::{data-id="api" .orange}
API-Methoden
:::
:::::

:::::{.column .center}
![](./images/title-svgs/implement.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="dto"}
DTOs
:::

```{.cs code-line-numbers="1-10|12-18|20-26|28-32|34-37"}	
public class ReadAnnouncementDto
{
    public int Id { get; set; }
    public DateTime CreationDate { get; set; }
    public DateTime? PublishedDate { get; set; }
    public string Title { get; set; }
    public string Content { get; set; }
    public AnnouncementStatusDto AnnouncementStatus { get; set; }
    public AnnouncementImageDto Image { get; set; }
}

public class CreateAnnouncementDto
{
    public string Title { get; set; }
    public AnnouncementStatusDto Status { get; set; }
    public string Content { get; set; }
    public IFormFile UploadedFile { get; set; }
}

public class UpdateAnnouncementDto : CreateAnnouncementDto
{
    [Required]
    public int Id { get; set; }

    public bool DeletePreviousImage { get; set; }
}

public class AnnouncementImageDto
{
    public string Image { get; set; }
    public string Thumbnail { get; set; }
}

public class AnnouncementStatusDto
{
    public string Name { get; set; }
}
```
## {auto-animate=true}
:::{.subheader}
Geschäftslogik
:::

::::{.columns}
:::::{.column width="50%"}
:::{data-id="dto" .done}
DTOs
:::
:::{data-id="service" .orange}
Services
:::
:::{data-id="auth" .orange}
Autorisierung
:::
:::{data-id="api" .orange}
API-Methoden
:::
:::::

:::::{.column .center}
![](./images/title-svgs/implement.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="service"}
Services
:::

**Auszug aus ImageService**

```{.cs code-line-numbers="1|3-7|11|13|15-16"}
public class ImageService(IFileService fileService)
{
    private const string _fileRootPath = "wwwroot/ImageFiles/";
    private const string _AnnouncementThumbnailRelativePath = "Announcements/Thumbnails/";
    private const string _AnnouncementImageRelativePath = "Announcements/";

    private readonly IFileService _fileService = fileService;

    ...

    public void DeleteAnnouncementImageFiles(Announcement announcement)
    {
        if (announcement.AnnouncementImage == null) return;

        _fileService.DeleteFile(announcement.AnnouncementImage.Thumbnail);
        _fileService.DeleteFile(announcement.AnnouncementImage.Image);
    }

    ...
}
```

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader}
Geschäftslogik
:::

::::{.columns}
:::::{.column width="50%"}
:::{data-id="dto" .done}
DTOs
:::
:::{data-id="service" .done}
Services
:::
:::{data-id="auth" .orange}
Autorisierung
:::
:::{data-id="api" .orange}
API-Methoden
:::
:::::

:::::{.column .center}
![](./images/title-svgs/implement.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="auth"}
Autorisierung
:::

![](./images/code_and_tests/AzureScopes.png)

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader}
Geschäftslogik
:::

::::{.columns}
:::::{.column width="50%"}
:::{data-id="dto" .done}
DTOs
:::
:::{data-id="service" .done}
Services
:::
:::{data-id="auth" .done}
Autorisierung
:::
:::{data-id="api" .orange}
API-Methoden
:::
:::::

:::::{.column .center}
![](./images/title-svgs/implement.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader data-id="controller"}
API-Methoden
:::

```{.cs code-line-numbers="1-6|12-25|27-41|43-58|60-81|83-96|98-111|113-126"}
[Authorize]
public class AnnouncementController(
    IUnitOfWork unitOfWork, 
    IMapper mapper, 
    ImageService imageService
    ) : ControllerBase
{
    private readonly IUnitOfWork _unitOfWork = unitOfWork;
    private readonly IMapper _mapper = mapper;
    private readonly ImageService _imageService = imageService;

    [HttpGet("{announcementId}")]
    public async Task<ActionResult<ReadAnnouncementDto>> GetById(int announcementId)
    {
        // Ensure that the user has the necessary permissions to call this method.
        VerifyUserScopes(Scopes.General);

        // Retrieve the Announcement object with the given ID.
        Announcement announcement = await GetAnnouncementAsync(announcementId);
        if (announcement.AnnouncementStatus.Name != "published")
            // Check Permission to read unpublished Announcements
            VerifyUserScopes(Scopes.Announcements); 

        return Ok(MapToReadAnnouncementDto(announcement));
    }

    [HttpGet()]
    public async Task<ActionResult<List<ReadAnnouncementDto>>> GetAllAnnouncements(
        int? order, 
        string? statusFilter
        )
    {
        // Ensure that the user has the necessary permissions to call this method.
        VerifyUserScopes(Scopes.General);
        ValidateParameters(order, statusFilter);

        var announcements = await GetFilteredAnnouncementsAsync(statusFilter);
        var dtos = announcements.ConvertAll(MapToReadAnnouncementDto);

        return Ok(SortAnnouncements(dtos, order));
    }

    [HttpPost]
    public async Task<ActionResult<CreateAnnouncementDto>> CreateAnnouncement(
        CreateAnnouncementDto announcementDTO
        )
    {
        VerifyUserScopes(Scopes.General, Scopes.Announcements);
        ValidateModelState();

        var announcement = MapToAnnouncement(announcementDTO);
        await ProcessAnnouncementImageAsync(announcement, announcementDTO.UploadedFile);

        await _unitOfWork.Announcement.CreateAnnouncementAsync(announcement);
        await _unitOfWork.CompleteAsync();

        return Ok(MapToReadAnnouncementDto(announcement));
    }

    [HttpPut]
    public async Task<ActionResult<UpdateAnnouncementDto>> UpdateAnnouncement(
        UpdateAnnouncementDto announcementDTO
        )
    {
        VerifyUserScopes(Scopes.General, Scopes.Announcements);
        ValidateModelState();
        ValidateStatus(announcementDTO.Status.Name);
        // Fetch entity from id
        var announcement = await GetAnnouncementAsync(announcementDTO.Id);
        // Map properties
        announcement = await MapToAnnouncement(announcement, announcementDTO);
        // Conditionally update image, status and date properties
        announcement = await UpdateAnnouncementProperties(announcementDTO, announcement); 
        // Update db and save changes
        _unitOfWork.Announcement.Update(announcement);
        await _unitOfWork.CompleteAsync();

        // return dto
        var readAnnouncementDTO = MapToReadAnnouncementDto(announcement);
        return Ok(readAnnouncementDTO);
    }

    [HttpDelete]
    public async Task<ActionResult> DeleteAnnouncement(int announcementId)
    {
        VerifyUserScopes(Scopes.General, Scopes.Announcements);

        var announcement = await GetAnnouncementAsync(announcementId);
        _imageService.DeleteAnnouncementImageFiles(announcement);

        var success = await _unitOfWork.Announcement.DeleteAsync(announcementId);
        if (!success) throw new TimeoutException(Resources.NoSqlResponseDeleteError);

        await _unitOfWork.CompleteAsync();
        return Ok();
    }

    [HttpGet("{id}/thumbnail")]
    public async Task<IActionResult> GetThumbnail(int id)
    {
        VerifyUserScopes(Scopes.General);
        var announcement = await GetAnnouncementAsync(id);

        if (announcement.AnnouncementStatus.Name != "published")
            VerifyUserScopes(Scopes.Announcements);

        return announcement.AnnouncementImage == null ? NotFound() : GetImageFileResult(
            announcement
            .AnnouncementImage
            .Thumbnail);
    }

    [HttpGet("{id}/image")]
    public async Task<IActionResult> GetImage(int id)
    {
        VerifyUserScopes(Scopes.General);
        var announcement = await GetAnnouncementAsync(id);

        if (announcement.AnnouncementStatus.Name != "published")
            VerifyUserScopes(Scopes.Announcements);

        return announcement.AnnouncementImage == null ? NotFound() : GetImageFileResult(
            announcement
            .AnnouncementImage
            .Image);
    }
}
```
:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

## {auto-animate=true}
:::{.subheader}
Geschäftslogik
:::

::::{.columns}
:::::{.column width="50%"}
:::{data-id="dto" .done}
DTOs
:::
:::{data-id="service" .done}
Services
:::
:::{data-id="auth" .done}
Autorisierung
:::
:::{data-id="api" .done}
API-Methoden
:::
:::::

:::::{.column .center}
![](./images/title-svgs/implement.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Implementierungsphase
:::

# Dokumentation {.center}
:::{.center .secure-layout}
![](./images/title-svgs/undraw_my-documents_ltqk.svg)
:::

## {auto-animate=true}
:::{.subheader}
API-Dokumentation
:::
::::{.columns}
:::::{.column width="40%"}
::::::{data-id="xml" .orange}
XML-Beispiel
::::::
::::::{data-id="o-api" .orange}
OpenAPI-Dokumentation
::::::
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_my-documents_ltqk.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Dokumentation
:::

## {auto-animate=true}
:::{.subheader data-id="xml"}
XML-Beispiel
:::
```{.cs code-line-numbers="1-30|1-3|4-11|18-24|25-30|32-43"}
    /// <summary>
    /// Retrieves a list of all announcements with optional filtering and sorting.
    /// </summary>
    /// <param name="order">
    /// An optional sorting parameter:
    /// - **0 or null**: No specific order (default).
    /// - **1**: Sort by published date (ascending).
    /// - **2**: Sort by published date (descending).
    /// - **3**: Sort by creation date (ascending).
    /// - **4**: Sort by creation date (descending).
    /// </param>
    /// <param name="statusFilter">
    /// An optional filter parameter:
    /// - **"published"**: Retrieve only published announcements.
    /// - **"draft"**: Retrieve only draft announcements (requires additional permissions).
    /// - **null or empty**: Retrieve all announcements (requires additional permissions).
    /// </param>
    /// <returns>
    /// Returns a list of announcements based on the applied filters and sorting.
    /// - **200 OK**: Announcements successfully retrieved.
    /// - **400 Bad Request**: Invalid filter or sorting parameter.
    /// - **403 Forbidden**: Access denied if filtering for drafts or all announcements without proper permissions.
    /// - **404 Not Found**: No announcements found based on the given criteria.
    /// </returns>
    /// <remarks>
    /// - The user must have the necessary permissions to access announcements.
    /// - Draft announcements or retrieving all announcements require additional authorization.
    /// - Dates are converted to UTC format for consistency.
    /// - Sorting is applied based on the provided order parameter.
    /// </remarks>

    [HttpGet()]
    public async Task<ActionResult<List<ReadAnnouncementDto>>> GetAllAnnouncements(int? order, string? statusFilter)
    {
        // Ensure that the user has the necessary permissions to call this method.
        VerifyUserScopes(Scopes.General);
        ValidateParameters(order, statusFilter);

        var announcements = await GetFilteredAnnouncementsAsync(statusFilter);
        var dtos = announcements.ConvertAll(MapToReadAnnouncementDto);

        return Ok(SortAnnouncements(dtos, order));
    }
```

:::{.footer}
© {{<meta name>}} | Dokumentation
:::

## {auto-animate=true}
:::{.subheader data-id="entity-Announcement"}
API-Dokumentation
:::
::::{.columns}
:::::{.column width="40%"}
::::::{data-id="xml" .done}
XML-Beispiel
::::::
::::::{data-id="o-api" .orange}
OpenAPI-Dokumentation
::::::
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_my-documents_ltqk.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Dokumentation
:::

## {auto-animate=true}
:::{.subheader data-id="o-api"}
OpenAPI-Dokumentation
:::
:::{.r-stack}
::::{.center}
![](./images/code_and_tests/Swagger.png)
::::
::::{.center}
![](./images/code_and_tests/SwaggerDetailed.png)
::::
:::

:::{.footer}
© {{<meta name>}} | Dokumentation
:::

# Abnahme {.center}
:::{.center .secure-layout}
![](./images/title-svgs/undraw_code-review_ept3.svg)
:::

## {auto-animate=true}
:::{.subheader}
Codeabnahme
:::
::::{.columns}
:::::{.column width="40%"}
- Vorbereitet durch TDD
- Manuelle Code-Reviews
- Abnahmeprotokoll
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_code-review_ept3.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Abnahme
:::

# Fazit {.center}
:::{.center .secure-layout}
![](./images/title-svgs/undraw_personal-file_81l0.svg)
:::

## {auto-animate=true}
:::{.subheader}
Lessons Learned
:::
::::{.columns}
:::::{.column width="50%"}
- Relevanz detaillierter Planung
- Zugriffskontrolle mit MS Scopes
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_personal-file_81l0.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Fazit
:::

## {auto-animate=true}
:::{.subheader}
Ausblick
:::
::::{.columns}
:::::{.column width="50%"}
- Anpassungen am Frontend
- Rollout
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_personal-file_81l0.svg)
:::::
::::

:::{.footer}
© {{<meta name>}} | Fazit
:::

## Ende {.center}
::::{.columns}
:::::{.column width="50%"}
Vielen Dank für Ihre Aufmerksamkeit!
:::::

:::::{.column .center}
![](./images/title-svgs/undraw_omega_aj2q.svg)
:::::
::::

## Bildquellen
[https://undraw.com](https://undraw.com)

[https://mermaid.js.org](https://mermaid.js.org)